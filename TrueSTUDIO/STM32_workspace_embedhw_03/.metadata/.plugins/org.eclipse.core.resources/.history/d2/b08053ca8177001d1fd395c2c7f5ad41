/*
*********************************************************************************************************
*                                              EXAMPLE CODE
*
*                             (c) Copyright 2013; Micrium, Inc.; Weston, FL
*
*                   All rights reserved.  Protected by international copyright laws.
*                   Knowledge of the source code may not be used to write a similar
*                   product.  This file may only be used in accordance with a license
*                   and should not be redistributed in any way.
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*
*                                            EXAMPLE CODE
*
*                                       IAR Development Kits
*                                              on the
*
*                                    STM32F429II-SK KICKSTART KIT
*
* Filename      : app.c
* Version       : V1.00
* Programmer(s) : YS
*                 DC
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*                                             INCLUDE FILES
*********************************************************************************************************
*/

#include  <includes.h>
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx.h"
/*
*********************************************************************************************************
*                                            LOCAL DEFINES
*********************************************************************************************************
*/

#define  APP_TASK_EQ_0_ITERATION_NBR              16u
/*
*********************************************************************************************************
*                                            TYPES DEFINITIONS
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*                                         FUNCTION PROTOTYPES
*********************************************************************************************************
*/

static  void  AppTaskStart          (void     *p_arg);
static  void  AppTaskCreate         (void);
static  void  AppObjCreate          (void);

static void AppTask_1000ms(void *p_arg);
static void AppTask_ButtonInput(void *p_arg);
static void AppTask_USART(void *p_arg);
static void AppTask_Countinit(void *p_arg);
/*
*********************************************************************************************************
*                                       LOCAL GLOBAL VARIABLES
*********************************************************************************************************
*/
/* ----------------- APPLICATION GLOBALS -------------- */
static  OS_TCB   AppTaskStartTCB;
static  CPU_STK  AppTaskStartStk[APP_CFG_TASK_START_STK_SIZE];

static  OS_TCB   Task_1000ms_TCB;
static  CPU_STK  Task_1000ms_Stack[APP_CFG_TASK_START_STK_SIZE];

static  OS_TCB   Task_ButtonInput_TCB;
static  CPU_STK  Task_ButtonInput_Stack[APP_CFG_TASK_START_STK_SIZE];

static  OS_TCB   Task_USART_TCB;
static  CPU_STK  Task_USART_Stack[APP_CFG_TASK_START_STK_SIZE];

static  OS_TCB   Task_CountInit_TCB;
static  CPU_STK  Task_CountInit_Stack[APP_CFG_TASK_START_STK_SIZE];

static  OS_Q	 BUT_Q;

static int click = 0;
/* ------------ FLOATING POINT TEST TASK -------------- */
/*
*********************************************************************************************************
*                                                main()
*
* Description : This is the standard entry point for C code.  It is assumed that your code will call
*               main() once you have performed all necessary initialization.
*
* Arguments   : none
*
* Returns     : none
*********************************************************************************************************
*/

typedef enum
{
  COM1 = 0,
  COM2 = 1
} COM_TypeDef;

/** @addtogroup STM324x9I_EVAL_LOW_LEVEL_COM
  * @{
  */
#define COMn                             1

/**
 * @brief Definition for COM port1, connected to USART3
 */
#define Nucleo_COM1                        USART3
#define Nucleo_COM1_CLK                    RCC_APB1Periph_USART3
#define Nucleo_COM1_TX_PIN                 GPIO_Pin_9
#define Nucleo_COM1_TX_GPIO_PORT           GPIOD
#define Nucleo_COM1_TX_GPIO_CLK            RCC_AHB1Periph_GPIOD
#define Nucleo_COM1_TX_SOURCE              GPIO_PinSource9
#define Nucleo_COM1_TX_AF                  GPIO_AF_USART3
#define Nucleo_COM1_RX_PIN                 GPIO_Pin_8
#define Nucleo_COM1_RX_GPIO_PORT           GPIOD
#define Nucleo_COM1_RX_GPIO_CLK            RCC_AHB1Periph_GPIOD
#define Nucleo_COM1_RX_SOURCE              GPIO_PinSource8
#define Nucleo_COM1_RX_AF                  GPIO_AF_USART3
#define Nucleo_COM1_IRQn                   USART1_IRQn

void     STM_Nucleo_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct);


USART_TypeDef* COM_USART[COMn] = {Nucleo_COM1};
GPIO_TypeDef* COM_TX_PORT[COMn] = {Nucleo_COM1_TX_GPIO_PORT};
GPIO_TypeDef* COM_RX_PORT[COMn] = {Nucleo_COM1_RX_GPIO_PORT};
const uint32_t COM_USART_CLK[COMn] = {Nucleo_COM1_CLK};
const uint32_t COM_TX_PORT_CLK[COMn] = {Nucleo_COM1_TX_GPIO_CLK};
const uint32_t COM_RX_PORT_CLK[COMn] = {Nucleo_COM1_RX_GPIO_CLK};
const uint16_t COM_TX_PIN[COMn] = {Nucleo_COM1_TX_PIN};
const uint16_t COM_RX_PIN[COMn] = {Nucleo_COM1_RX_PIN};
const uint16_t COM_TX_PIN_SOURCE[COMn] = {Nucleo_COM1_TX_SOURCE};
const uint16_t COM_RX_PIN_SOURCE[COMn] = {Nucleo_COM1_RX_SOURCE};
const uint16_t COM_TX_AF[COMn] = {Nucleo_COM1_TX_AF};
const uint16_t COM_RX_AF[COMn] = {Nucleo_COM1_RX_AF};


void STM_Nucleo_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);

  if (COM == COM1)
  {
    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
  }

  /* Connect PXx to USARTx_Tx*/
  GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);

  /* Connect PXx to USARTx_Rx*/
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);

  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);

  /* Configure USART Rx as alternate function  */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);

  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
}




static void USART_Config(void)
{
  USART_InitTypeDef USART_InitStructure;

  /* USARTx configured as follows:
        - BaudRate = 115200 baud
        - Word Length = 8 Bits
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 115200;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  STM_Nucleo_COMInit(COM1, &USART_InitStructure);
}

void send_string(const char *str)
{
    while (*str)
    {
        while (USART_GetFlagStatus(Nucleo_COM1, USART_FLAG_TXE) == RESET);
        USART_SendData(Nucleo_COM1, *str++);
    }
}


int main(void)
{
    OS_ERR  err;

    /* Basic Init */
    RCC_DeInit();
//    SystemCoreClockUpdate();

    /* BSP Init */
    BSP_IntDisAll();                                            /* Disable all interrupts.                              */

    CPU_Init();                                                 /* Initialize the uC/CPU Services                       */
    Mem_Init();                                                 /* Initialize Memory Management Module                  */
    Math_Init();                                                /* Initialize Mathematical Module                       */
    USART_Config();

    /* OS Init */
    OSInit(&err);                                               /* Init uC/OS-III.                                      */

    OSTaskCreate((OS_TCB       *)&AppTaskStartTCB,              /* Create the start task                                */
                 (CPU_CHAR     *)"App Task Start",
                 (OS_TASK_PTR   )AppTaskStart,
                 (void         *)0u,
                 (OS_PRIO       )APP_CFG_TASK_START_PRIO,
                 (CPU_STK      *)&AppTaskStartStk[0u],
                 (CPU_STK_SIZE  )AppTaskStartStk[APP_CFG_TASK_START_STK_SIZE / 10u],
                 (CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE,
                 (OS_MSG_QTY    )0u,
                 (OS_TICK       )0u,
                 (void         *)0u,
                 (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR       *)&err);

   OSStart(&err);   /* Start multitasking (i.e. give control to uC/OS-III). */

   (void)&err;

   return (0u);
}
/*
*********************************************************************************************************
*                                          STARTUP TASK
*
* Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
*               initialize the ticker only once multitasking has started.
*
* Arguments   : p_arg   is the argument passed to 'AppTaskStart()' by 'OSTaskCreate()'.
*
* Returns     : none
*
* Notes       : 1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
*                  used.  The compiler should not generate any code for this statement.
*********************************************************************************************************
*/
static  void  AppTaskStart (void *p_arg)
{
    OS_ERR  err;

   (void)p_arg;

    BSP_Init();                                                 /* Initialize BSP functions                             */
    CPU_Init();

    BSP_Tick_Init();                                            /* Initialize Tick Services.                            */

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageInit(&err);                               /* Compute CPU capacity with no task running            */
#endif

#ifdef CPU_CFG_INT_DIS_MEAS_EN
    CPU_IntDisMeasMaxCurReset();
#endif

   // BSP_LED_Off(0u);                                            /* Turn Off LEDs after initialization                   */

   APP_TRACE_DBG(("Creating Application Kernel Objects\n\r"));
   AppObjCreate();                                             /* Create Applicaiton kernel objects                    */

   APP_TRACE_DBG(("Creating Application Tasks\n\r"));
   AppTaskCreate();                                            /* Create Application tasks                             */
}

/*
*********************************************************************************************************
*                                          AppTask_1000ms
*
* Description : Example of 1000mS Task
*
* Arguments   : p_arg (unused)
*
* Returns     : none
*
* Note: Long period used to measure timing in person
*********************************************************************************************************
*/
static void AppTask_1000ms(void *p_arg)
{
    OS_ERR  err;
    BSP_LED_On(2);
    int message;
    int lednum = 0;
    int state = 0;

    while (DEF_TRUE)
    {                                          /* Task body, always written as an infinite loop.       */

		message = (int)OSQPend((OS_Q *)&BUT_Q,
							   (OS_TICK)0u, // wait forever
							   (OS_OPT)OS_OPT_PEND_BLOCKING,
							   (OS_MSG_SIZE *)sizeof(int *),
							   (CPU_TS *)0,
							   (OS_ERR *)&err);

    	if(message == 0)
    	{
    		if (state == 0)
    		{
				BSP_LED_Off(2);
				BSP_LED_Off(3);
				BSP_LED_Toggle(1);
    		}
    		else if (state == 1)
    		{
            	BSP_LED_Off((lednum+1) % 3 + 1);
            	BSP_LED_Off((lednum+2) % 3 + 1);
            	BSP_LED_Toggle(lednum+1);
    		}
    		else if (state == 2)
    		{

        		BSP_LED_Toggle(1);
        		BSP_LED_Toggle(2);
            	BSP_LED_Toggle(3);
    		}
    	}

    	if(message == 2)
    	{
    		lednum++;
    		lednum %= 3;
    		state = 1;
    	}

    	if(message == 4)
    	{
    		state = 2;
    	}

    	if(message > 4)
    	{
    		state = 0;
    	}

    	OSTimeDlyHMSM(0u, 0u, 1u, 0u,
                      OS_OPT_TIME_HMSM_STRICT,
                      &err);

    }
}

static void AppTask_ButtonInput(void *p_arg)
{
    OS_ERR  err;
    int button = 0;
    int prev_button = 0;
    while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */


    	button = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);

    	if(button != prev_button)
    	{
        	click++;
        	prev_button = button;
    	}


        OSQPost( (OS_Q *)&BUT_Q,
        		 (void *)click,
    			 (OS_MSG_SIZE)sizeof(int *),
    			 (OS_OPT)OS_OPT_POST_ALL,
    			 (OS_ERR *)&err);

        OSTimeDlyHMSM(0u, 0u, 0u, 250u,
                      OS_OPT_TIME_HMSM_STRICT,
                      &err);

    }
}

int startflag = 1;
static void AppTask_USART(void *p_arg)
{
	OS_ERR err;
	int message;

	while (DEF_TRUE)
	{
		if(startflag)
		{
			// send_string("\n\rSystem start \n\r");
			startflag = 0;
		}

		message = (int)OSQPend((OS_Q *)&BUT_Q,
							   (OS_TICK)0u, // wait forever
							   (OS_OPT)OS_OPT_PEND_NON_BLOCKING,
							   (OS_MSG_SIZE *)sizeof(int *),
							   (CPU_TS *)0,
							   (OS_ERR *)&err);

    	if(message == 2)
    	{

    	}

    	if(message == 4)
    	{

    	}

    	if(message > 4)
    	{

    	}


		OSTimeDlyHMSM(0u, 0u, 0u, 500u,
                      OS_OPT_TIME_HMSM_STRICT,
                      &err);
	}
}

static void AppTask_CountInit(void *p_arg)
{
	OS_ERR err;


	// Initialize click count every 4seconds
	while (DEF_TRUE)
	{
		click = 0;

		OSTimeDlyHMSM(0u, 0u, 2u, 0u,
                      OS_OPT_TIME_HMSM_STRICT,
                      &err);
	}
}

/*
*********************************************************************************************************
*                                          AppTaskCreate()
*
* Description : Create application tasks.
*
* Argument(s) : none
*
* Return(s)   : none
*
* Caller(s)   : AppTaskStart()
*
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  AppTaskCreate (void)
{
	OS_ERR  err;
	// Button Count Initialization Task, priority : 4, term : 2 second
	OSTaskCreate(
		(OS_TCB       *)&Task_CountInit_TCB,               /*      CountInit task         */
		(CPU_CHAR     *)"AppTask_Countinit",
		(OS_TASK_PTR   )AppTask_CountInit,
		(void         *)0u,
		(OS_PRIO       )6, // set priority
		(CPU_STK      *)&Task_CountInit_Stack[0u],
		(CPU_STK_SIZE  )Task_CountInit_Stack[APP_CFG_TASK_START_STK_SIZE / 10u],
		(CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE,
		(OS_MSG_QTY    )0u,
		(OS_TICK       )0u,
		(void         *)0u,
		(OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
		(OS_ERR       *)&err);

	// LED Task, priority : 5, term : 1 second
	OSTaskCreate(
		(OS_TCB       *)&Task_1000ms_TCB,              /*       LED task        */
		(CPU_CHAR     *)"AppTask_1000ms",
		(OS_TASK_PTR   )AppTask_1000ms,
		(void         *)0u,
		(OS_PRIO       )4, // set priority
		(CPU_STK      *)&Task_1000ms_Stack[0u],
		(CPU_STK_SIZE  )Task_1000ms_Stack[APP_CFG_TASK_START_STK_SIZE / 10u],
		(CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE,
		(OS_MSG_QTY    )0u,
		(OS_TICK       )0u,
		(void         *)0u,
		(OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
		(OS_ERR       *)&err);

	// Button Task, priority 6, term : 50ms
	OSTaskCreate(
		(OS_TCB       *)&Task_ButtonInput_TCB,         /*    ButtonInput task    */
		(CPU_CHAR     *)"AppTask_ButtonInput",
		(OS_TASK_PTR   )AppTask_ButtonInput,
		(void         *)0u,
		(OS_PRIO       )5, // set priority
		(CPU_STK      *)&Task_ButtonInput_Stack[0u],
		(CPU_STK_SIZE  )Task_ButtonInput_Stack[APP_CFG_TASK_START_STK_SIZE / 10u],
		(CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE,
		(OS_MSG_QTY    )0u,
		(OS_TICK       )0u,
		(void         *)0u,
		(OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
		(OS_ERR       *)&err);

	OSTaskCreate(
		(OS_TCB       *)&Task_USART_TCB,               /*      USART task         */
		(CPU_CHAR     *)"AppTask_USART",
		(OS_TASK_PTR   )AppTask_USART,
		(void         *)0u,
		(OS_PRIO       )7, // set priority
		(CPU_STK      *)&Task_USART_Stack[0u],
		(CPU_STK_SIZE  )Task_USART_Stack[APP_CFG_TASK_START_STK_SIZE / 10u],
		(CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE,
		(OS_MSG_QTY    )0u,
		(OS_TICK       )0u,
		(void         *)0u,
		(OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
		(OS_ERR       *)&err);
}

/*
*********************************************************************************************************
*                                          AppObjCreate()
*
* Description : Create application kernel objects tasks.
*
* Argument(s) : none
*
* Return(s)   : none
*
* Caller(s)   : AppTaskStart()
*
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  AppObjCreate (void)
{
	OS_ERR err;

	OSQCreate((OS_Q *)&BUT_Q,
			  (CPU_CHAR *)"Button Queue",
			  (OS_MSG_QTY)1, // Queue size = 1
			  (OS_ERR *)&err);
}
